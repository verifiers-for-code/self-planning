{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    \n    for char in paren_string:\n        if char == \"(\":\n            current_group += char\n        elif char == \")\":\n            current_group += char\n            result.append(current_group)\n            current_group = \"\"\n    \n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into \n    and integer part (largest integer smaller than given number) and decimals \n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    # Convert the float to a string\n    str_number = str(number)\n    \n    # Split the string at the decimal point\n    parts = str_number.split('.')\n    \n    # Return the second part of the split string\n    return float(parts[1]) if len(parts) > 1 else 0.0"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \n    Parameters:\n    numbers (List[float]): A list of float numbers.\n    \n    Returns:\n    float: The Mean Absolute Deviation.\n    \"\"\"\n    # 1. Calculate the mean of the input list.\n    mean = sum(numbers) / len(numbers)\n    \n    # 2. Calculate the absolute difference between each number and the mean.\n    deviations = [abs(num - mean) for num in numbers]\n    \n    # 3. Calculate the average of the absolute differences.\n    mad = sum(deviations) / len(deviations)\n    \n    # 4. Return the result.\n    return mad"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    level = 0\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            level += 1\n        elif char == ')':\n            stack.pop()\n            level -= 1\n        if not stack:\n            result.append(level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    \n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n    \n    return sum_of_numbers, product_of_numbers"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    rev_string = string[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            return string + rev_string[i:]\n    return string + rev_string"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \n    1. Initialize an empty string result.\n    2. Loop through the characters of the input strings.\n    3. For each pair of characters, perform a binary XOR operation and append the result to the result string.\n    4. Return the result string.\"\"\"\n    result = ''\n    for char_a, char_b in zip(a, b):\n        result += str(int(char_a) ^ int(char_b))\n    return result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n\n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    result = ''\n    for i in range(n + 1):\n        result += str(i) + ' '\n    return result.strip()"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"Given a string, find out how many distinct characters (regardless of case) does it consist of\"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n    \n    # Create a set to store unique characters\n    distinct_chars = set()\n    \n    # Loop through the string, add each character to the set\n    for char in string:\n        distinct_chars.add(char)\n    \n    # Return the size of the set\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Parse a string representing musical notes and return a list of integers corresponding to how many beats each note lasts.\"\"\"\n    \n    # Create a dictionary to map note symbols to their corresponding beat lengths\n    note_lengths = {'o': 4, 'o|': 2, '.|': 1}\n    \n    # Initialize an empty list to store the parsed notes\n    parsed_notes = []\n    \n    # Loop through the input string, and for each note symbol, append the corresponding beat length to the list\n    for note in music_string.split():\n        parsed_notes.append(note_lengths[note])\n    \n    # Return the list of parsed notes\n    return parsed_notes"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string. \n    Count overlapping cases.\n    \n    Parameters:\n    string (str): The original string to search in.\n    substring (str): The substring to search for.\n    \n    Returns:\n    int: The number of times the substring can be found in the original string.\n    \"\"\"\n    count = 0\n    start_index = 0\n    \n    while start_index < len(string):\n        if string[start_index:start_index + len(substring)] == substring:\n            count += 1\n            start_index += 1\n        else:\n            start_index += 1\n    \n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map the string numbers to their integer values\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    # Split the input string into a list of strings\n    num_list: List[str] = numbers.split()\n\n    # Sort the list of strings based on the dictionary values\n    sorted_num_list: List[str] = sorted(num_list, key=lambda x: num_dict[x])\n\n    # Join the sorted list of strings back into a string with spaces in between\n    sorted_str: str = ' '.join(sorted_num_list)\n\n    return sorted_str"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Step 1: Sort the list of numbers\n    numbers.sort()\n    \n    # Step 2: Initialize the minimum difference and the closest pair of numbers\n    min_diff = float('inf')\n    closest_pair = (None, None)\n    \n    # Step 3: Loop through the sorted list, comparing each pair of adjacent numbers\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\"\"\"\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Calculate the range of the list\n    range_val = max_val - min_val\n    \n    # Create a new list where each element is the difference between the element and the minimum value divided by the range\n    rescaled_list = [(num - min_val) / range_val for num in numbers]\n    \n    return rescaled_list"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    filtered_list = []  # 1. Create an empty list to store the filtered integers.\n    for value in values:  # 2. Loop through the input list.\n        if isinstance(value, int):  # 3. Check if the current element is an integer, if yes, append it to the filtered list.\n            filtered_list.append(value)\n    return filtered_list  # 4. Return the filtered list."}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"Return length of given string\"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\"\"\"\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0 and is_prime(i):\n            count = 0\n            while n % i == 0:\n                n //= i\n                count += 1\n            factors.append(i * [i])\n        i += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    frequency = {}\n    \n    for num in numbers:\n        if num not in frequency or frequency[num] == 1:\n            result.append(num)\n            frequency[num] = frequency.get(num, 0) + 1\n    \n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    result = ''\n    for string in strings:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    positive_numbers = []\n    for num in l:\n        if num > 0:\n            positive_numbers.append(num)\n    return positive_numbers"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        return None\n    def poly_prime(xs: list, x: float):\n        \"\"\"\n        Evaluates derivative of polynomial with coefficients xs at point x.\n        return derivative of xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n        \"\"\"\n        return sum([i * coeff * math.pow(x, i-1) for i, coeff in enumerate(xs)])\n    def newton_raphson(x0: float, tol: float = 1e-5, max_iter: int = 100):\n        \"\"\"\n        Use the Newton-Raphson method to find the root.\n        \"\"\"\n        for _ in range(max_iter):\n            x1 = x0 - poly(xs, x0) / poly_prime(xs, x0)\n            if abs(x1 - x0) < tol:\n                return round(x1, 2)\n            x0 = x1\n        return None\n    return newton_raphson(max([abs(coeff) for coeff in xs]) / 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    non_divisible = [i for i in range(len(l)) if i % 3 != 0]\n    divisible = sorted([x for i, x in enumerate(l) if i % 3 == 0])\n    return [x if i not in non_divisible else divisible.pop(0) for i, x in enumerate(l)]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    return [x if i % 2 != 0 else sorted([x for x in l if i % 2 == 0])[0] for i, x in enumerate(l)]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \n    1. Split the string into groups of 3 characters.\n    2. For each group, rotate the characters to the right by 1 position.\n    3. Join the groups back together to form the decoded string.\n    \n    Note: The decode_cyclic function is the inverse of the encode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    \n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # reverse the cycle in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    \n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n        if is_prime(b):\n            return b\n    return None"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    collisions = 0\n    left_cars = []\n    right_cars = []\n    \n    for i in range(n):\n        left_cars.append(i)\n        right_cars.append(n - i - 1)\n    \n    for i in range(n):\n        if left_cars[i] == right_cars[n - i - 1]:\n            collisions += 1\n            left_cars.pop(i)\n            right_cars.pop(n - i - 1 - 1)\n            i -= 1\n    \n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    new_list = []\n    for i in l:\n        new_list.append(i + 1)\n    return new_list"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    convertString = \"0123456789ABCDEF\"\n    if x < base:\n        return convertString[x]\n    else:\n        return change_base(x // base, base) + convertString[x % base]"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    fib4_sequence = [0, 0, 2, 0]\n    for i in range(4, n):\n        fib4_sequence.append(fib4_sequence[i-1] + fib4_sequence[i-2] + fib4_sequence[i-3] + fib4_sequence[i-4])\n    return fib4_sequence[n-1]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # Remove all non-alphanumeric characters from the string\n    text = ''.join(e for e in text if e.isalnum())\n    \n    # Convert the string to lowercase\n    text = text.lower()\n    \n    # Compare the string with its reverse\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    Return the sum of x and y.\"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \n    Args:\n    s0 (str): The first string.\n    s1 (str): The second string.\n    \n    Returns:\n    bool: True if the strings have the same characters, False otherwise.\n    \"\"\"\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    if len(l) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Convert the lists to sets\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    intersection = set1 & set2\n    \n    # Convert the intersection back to a list\n    common_elements = list(intersection)\n    \n    # Sort the list\n    common_elements.sort()\n    \n    return common_elements"}
{"task_id": "HumanEval/59", "completion": "def is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            if is_prime(i):\n                return i\n            while n % i == 0:\n                n //= i\n        i += 1\n    return 1"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"Return the derivative of a polynomial represented by the coefficients in xs.\"\"\"\n    result = []  # Create an empty list to store the coefficients of the derivative.\n    for i in range(1, len(xs)):  # Loop through the input list, starting from the second element (index 1).\n        result.append(i * xs[i])  # For each element, multiply it by its index (plus 1) and add it to the result list.\n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    memo = {0: 0, 1: 0, 2: 1}\n    for i in range(3, n + 1):\n        memo[i] = memo[i-1] + memo[i-2] + memo[i-3]\n    return memo[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set('aeiou')\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    str_x = str(x)\n    shift = shift % len(str_x)\n    return str_x[-shift:] + str_x[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    s = s.replace(\" apples\", \"\").replace(\" oranges\", \"\").replace(\" and\", \"\").replace(\" \", \"\")\n    apples = int(s.split(\" \")[0])\n    oranges = int(s.split(\" \")[1])\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [(node, i) for i, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n    even_nodes.sort(key=lambda x: (x[0], x[1]))\n    return [even_nodes[0][0], even_nodes[0][1]]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    frequency_dict = {}\n    for num in lst:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    for num, freq in frequency_dict.items():\n        if freq >= num and num > 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    changes = 0\n    for count in freq.values():\n        changes += (count // 2) * 2\n    return len(arr) - changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    \n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Check if a number is the multiplication of 3 prime numbers.\"\"\"\n    for i in range(2, int(a**0.5) + 1):\n        if is_prime(i):\n            for j in range(i, int(a/i) + 1):\n                if is_prime(j) and i * j == a:\n                    for k in range(j, int(a/(i*j)) + 1):\n                        if is_prime(k) and i * j * k == a:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    import math\n    if n <= 0:\n        return False\n    root = round(math.pow(n, 1.0 / math.log(x, n)))\n    return root == int(root) and root > 0"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    \"\"\"\n    This function checks if a given integer is a cube of some integer number.\n    \n    Parameters:\n    a (int): The input integer to be checked.\n    \n    Returns:\n    bool: True if the integer is a cube, False otherwise.\n    \"\"\"\n    # Calculate the cube root of the input number\n    cube_root = round(a ** (1. / 3))\n    \n    # Check if the cube root is an integer\n    if cube_root ** 3 == a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    # Create a dictionary to map hexadecimal digits to their decimal values\n    hex_map = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n\n    # Create a list of prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 221, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 299, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 637, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 913, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n    # Loop through each character in the input string\n    count = 0\n    for char in num:\n        # If the character is a hexadecimal digit and its decimal value is in the list of prime numbers, increment the count\n        if char in hex_map and hex_map[char] in primes:\n            count += 1\n\n    # Return the count\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert decimal to binary and remove '0b' prefix\n    binary = 'db' + binary + 'db'  # Add 'db' at the beginning and end of the string\n    return binary\n\nprint(decimal_to_binary(15))  # returns \"db1111db\"\nprint(decimal_to_binary(32))  # returns \"db100000db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s), 3):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grade_map = {\n        4.0: 'A+', \n        3.7: 'A', \n        3.3: 'A-', \n        3.0: 'B+', \n        2.7: 'B', \n        2.3: 'B-', \n        2.0: 'C+', \n        1.7: 'C', \n        1.3: 'C-', \n        1.0: 'D+', \n        0.7: 'D', \n        0.0: 'D-', \n        0: 'E'\n    }\n    result = []\n    for grade in grades:\n        for key, value in sorted(grade_map.items(), reverse=True):\n            if grade >= key:\n                result.append(value)\n                break\n    return result"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Check if the length of a string is a prime number\"\"\"\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Calculate the total number of n-digit positive integers.\n    total = 10 ** (n - 1) * 9\n\n    # Calculate the number of n-digit positive integers that start with 1.\n    start_with_one = 10 ** (n - 1)\n\n    # Calculate the number of n-digit positive integers that end with 1.\n    end_with_one = 10 ** (n - 1)\n\n    # Calculate the number of n-digit positive integers that do not start with 1.\n    not_start_with_one = total - start_with_one\n\n    # Calculate the number of n-digit positive integers that do not end with 1.\n    not_end_with_one = total - end_with_one\n\n    # Add the number of n-digit positive integers that start with 1 and the number of n-digit positive integers that end with 1 to get the total count of the numbers of n-digit positive integers that start or end with 1.\n    count = start_with_one + end_with_one\n\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    \n    # Initialize a variable to store the sum of the digits\n    total_sum = 0\n    \n    # Loop through each character in the binary string\n    for digit in binary:\n        # Add the integer value of the character to the sum\n        total_sum += int(digit)\n    \n    # Return the sum as a string\n    return str(total_sum)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n\nprint(anti_shuffle('Hi'))  # returns 'Hi'\nprint(anti_shuffle('hello'))  # returns 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # returns 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return array\n\n    first_last_sum = array[0] + array[-1]\n    if first_last_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            result += char\n    return result\n\nprint(encrypt('hi'))  # returns 'lm'\nprint(encrypt('asdfghjkl'))  # returns 'ewhjklnop'\nprint(encrypt('gf'))  # returns 'kj'\nprint(encrypt('et'))  # returns 'ix'"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if not lst:\n        return None\n    sorted_lst = sorted(lst)\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('. ')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    return sum(1 for sentence in sentences if sentence and sentence[0].lower() == 'i')"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return (x == y + z) or (x == z + y) or (y == x + z) or (y == z + x) or (z == x + y) or (z == y + x)"}
{"task_id": "HumanEval/93", "completion": "def swap_case(message):\n    \"\"\"\n    This function swaps the case of all letters in the message.\n    \"\"\"\n    return message.swapcase()\n\ndef replace_vowels(message):\n    \"\"\"\n    This function replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            index = vowels.index(char)\n            if index + 2 < len(vowels):\n                result += vowels[index + 2]\n            else:\n                result += vowels[0]\n        else:\n            result += char\n    return result\n\ndef encode(message):\n    \"\"\"\n    This function combines the two functions to create the final encoded message.\n    \"\"\"\n    return replace_vowels(swap_case(message))"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Calculate the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_sum(lst):\n    \"\"\"Find the largest prime number in the list and return the sum of its digits.\"\"\"\n    max_prime = max((num for num in lst if is_prime(num)), default=0)\n    return sum_of_digits(max_prime)"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    all_keys_str = all(isinstance(key, str) for key in dict.keys())\n    if not all_keys_str:\n        return False\n    \n    all_keys_lower = all(key.islower() for key in dict.keys())\n    all_keys_upper = all(key.isupper() for key in dict.keys())\n    \n    return all_keys_lower or all_keys_upper"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Calculate the unit digits of the two numbers\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    \n    # Multiply the unit digits together\n    product = unit_digit_a * unit_digit_b\n    \n    # Return the result\n    return product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0  # Initialize a counter variable to 0\n    for i in range(0, len(s), 2):  # Loop through the string, considering only even indices\n        char = s[i]  # Get the character at the current index\n        if char in 'AEIOU':  # Check if the character is an uppercase vowel\n            count += 1  # If it is, increment the counter\n    return count  # Return the counter"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    if value - int(value) < 0.5:\n        return int(value)\n    else:\n        return int(round(value))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if i % 2 == 0:\n            pile.append(pile[-1] + 2)\n        else:\n            pile.append(pile[-1] + 1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Filter the array to include only numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    filtered_arr.sort()\n    \n    # Reverse the sorted array\n    filtered_arr = filtered_arr[::-1]\n    \n    # Replace each number with its corresponding name from \"One\" to \"Nine\"\n    num_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = [num_names[num] for num in filtered_arr]\n    \n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = [0] * n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result[i-1] = 1\n            for j in range(2, i+1):\n                result[i-1] *= j\n        else:\n            result[i-1] = sum(range(1, i+1))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = str(num)[1:]\n            num = -int(num)\n        else:\n            num = int(str(num))\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    max_element = max(arr)\n    shift_count = 0\n\n    for i in range(len(arr)):\n        if arr[i] < max_element:\n            shift_count += 1\n        else:\n            max_element = arr[i]\n\n    return shift_count == 0"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    even_lst1 = set([num for num in lst1 if num % 2 == 0])\n    even_lst2 = set([num for num in lst2 if num % 2 == 0])\n    if even_lst1.issubset(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n\n    letter_count = {}\n    for letter in test.split():\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n    max_count = max(letter_count.values())\n    max_letters = [letter for letter, count in letter_count.items() if count == max_count]\n\n    return {letter: count for letter, count in letter_count.items() if letter in max_letters}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    new_string = ''.join([char for char in s if char not in c])\n    return (new_string, new_string == new_string[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {i+1} of the {i+1}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    total_bucket_capacity = capacity\n    return math.ceil(total_water / total_bucket_capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Convert each integer to binary and count the number of ones\n    arr = sorted((bin(i).count('1'), i) for i in arr)\n    return [i[1] for i in arr]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for char in word:\n            if char.lower() not in 'aeiou':\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    result = \"\"\n    is_vowel_found = False\n    for char in reversed(word):\n        if char.lower() in 'aeiou':\n            if not is_vowel_found:\n                is_vowel_found = True\n                result = char\n        elif is_vowel_found:\n            break\n    return result"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    open_parens = 0\n    close_parens = 0\n    for s in lst:\n        if s == '(':\n            open_parens += 1\n        elif s == ')':\n            if open_parens == 0:\n                return 'No'\n            open_parens -= 1\n    return 'Yes' if open_parens == 0 else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum_odd_in_even_positions = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 != 0:\n            sum_odd_in_even_positions += num\n    return sum_odd_in_even_positions"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Create a variable to store the sum\n    total_sum = 0\n    \n    # Loop through the first k elements of the array\n    for i in range(k):\n        # For each element, check if it has at most two digits\n        if len(str(arr[i])) <= 2:\n            # If it does, add it to the sum\n            total_sum += arr[i]\n    \n    # Return the sum\n    return total_sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    # Create a function to generate the Collatz sequence for a given number.\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    # Initialize an empty list to store the odd numbers in the sequence.\n    odd_numbers = []\n\n    # Generate the Collatz sequence for the given number.\n    sequence = collatz(n)\n\n    # Add the odd numbers in the sequence to the list.\n    for num in sequence:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n\n    # Return the sorted list of odd numbers.\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    This function validates a given date string and returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    Parameters:\n    date (str): The date string to be validated.\n\n    Returns:\n    bool: True if the date is valid, False otherwise.\n    \"\"\"\n    # Split the date string into month, day, and year\n    date_parts = date.split('-')\n    \n    # Check if the date string is not empty\n    if len(date_parts) != 3:\n        return False\n    \n    # Check if the month is between 1 and 12\n    month, day, year = map(int, date_parts)\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid for the given month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    # Check if the year is valid\n    if len(str(year)) != 4:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if not words:\n        return [i for i, c in enumerate('abcdefghijklmnopqrstuvwxyz') if c in txt.lower() and i % 2 != 0]\n    return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            if lst.count(lst[i]) > 1:\n                return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Calculate the intersection of two intervals and check if its length is a prime number\"\"\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    intersection_length = end - start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num == 0:\n            sign_product = 0\n        elif num > 0:\n            sum_magnitudes += num\n        else:\n            sign_product *= -1\n            sum_magnitudes += num\n    return sign_product * sum_magnitudes"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    freq = {}\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] not in freq:\n                freq[grid[i][j]] = 0\n            freq[grid[i][j]] += 1\n\n    result = []\n    current_num = grid[0][0]\n    current_path = [current_num]\n    for _ in range(k):\n        freq[current_num] -= 1\n        if freq[current_num] == 0:\n            del freq[current_num]\n        result.append(current_num)\n        current_path.append(current_num)\n        if len(freq) == 0:\n            break\n        current_num = min((num for num in freq if freq[num] > 0))\n    return current_path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    tribonacci_sequence = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci_sequence.append(1 + i / 2)\n        else:\n            tribonacci_sequence.append(tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i - 3])\n    return tribonacci_sequence"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += math.ceil(num) ** 2\n    return total"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if txt.rstrip().endswith(last_char):\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    result = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            result = i\n    return result"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    \n    if not negative and not positive:\n        return None, None\n    elif not negative:\n        return None, min(positive)\n    elif not positive:\n        return max(negative), None\n    else:\n        return max(negative), min(positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    for i in range(2, n//2 + 1):\n        if sum(range(2, i+1, 2)) == n:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = \"\"\n    prev_char = \"\"\n    for char in text:\n        if char == \" \":\n            if prev_char == \" \":\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            result += char\n        prev_char = char\n    return result"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name.split('.')[0][0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    filtered_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(filtered_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    gcd = lambda a, b: a if not b else gcd(b, a % b)\n    common_divisor = gcd(product_num, product_den)\n    product_num //= common_divisor\n    product_den //= common_divisor\n    return product_num == product_den"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return [x for _, x in sorted((sum(int(digit) for digit in str(abs(num))), i, num) for i, num in enumerate(nums))]"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    even_length_list = [word for word in lst if len(word) % 2 == 0]\n    even_length_list.sort(key=lambda x: (len(x), x))\n    return even_length_list"}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return the value of x if n is a prime number, otherwise return y.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if isinstance(i, int) and i % 2 != 0 and i >= 0])"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    differences = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            differences.append(0)\n        else:\n            differences.append(abs(game[i] - guess[i]))\n    return differences"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    extension_strength = {}\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        extension_strength[extension] = strength\n    max_strength = max(extension_strength.values())\n    strongest_extension = [extension for extension, strength in extension_strength.items() if strength == max_strength][0]\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    b_set = set(b)\n    for i in range(len(a) - len(b) + 1):\n        if set(a[i:i+len(b)]) == b_set or set(a[i:i+len(b)][1:] + a[i:i+len(b)][0]) == b_set:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num_str = str(abs(num))  # Convert the number to a string and remove the negative sign if it exists\n    even_count = 0\n    odd_count = 0\n    \n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    roman = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            roman += roman_numerals[value]\n            number -= value\n    return roman.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if the sum of the lengths of any two sides is greater than the third side\n    if a + b > c and a + c > b and b + c > a:\n        # Check if the square of the length of the longest side is equal to the sum of the squares of the other two sides\n        if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n            return True\n    return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_count = 0\n    max_word = \"\"\n    word_count = {}\n    \n    for word in words:\n        unique_chars = set(word)\n        word_count[word] = len(unique_chars)\n        \n        if word_count[word] > max_count:\n            max_count = word_count[word]\n            max_word = word\n        elif word_count[word] == max_count:\n            max_word = min(max_word, word)\n    \n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    total_eaten = number + need\n    if total_eaten > remaining:\n        total_eaten = remaining\n    left = remaining - total_eaten\n    return [total_eaten, left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator=['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    1. Initialize the result with the first operand.\n    2. Loop through the operator and operand lists.\n    3. Apply the current operator to the result and the next operand.\n    4. Update the result.\n    5. Return the final result.\n    \"\"\"\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            if result:\n                result = result[::-1]\n            result += char\n    if result:\n        result = result[::-1]\n    return result"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Create an empty list to store the even digits\n    even_digits = []\n\n    # Loop from a to b (inclusive)\n    for i in range(a, b + 1):\n        # Check if the current number is even\n        if i % 2 == 0:\n            # If yes, add it to the list\n            even_digits.append(i)\n\n    # Return the list\n    return even_digits"}
