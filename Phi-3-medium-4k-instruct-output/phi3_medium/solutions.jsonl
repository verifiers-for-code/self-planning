{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    # Step 1: Sort the list of numbers\n    numbers.sort()\n\n    # Step 2: Loop through the list, compare the difference between adjacent numbers\n    for i in range(len(numbers) - 1):\n        # Step 3: If the difference is less than the threshold, return True\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n\n    # Step 4: If no such pair is found, return False\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \n    :param paren_string: A string containing multiple groups of nested parentheses\n    :return: A list of strings, each string representing a separate group of balanced parentheses\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Create a stack to keep track of the opening parentheses\n    stack = []\n\n    # Create a list to store the groups of balanced parentheses\n    groups = []\n\n    # Iterate through the string\n    for char in paren_string:\n        if char == \"(\":\n            # If it's an opening parenthesis, push it to the stack\n            stack.append(char)\n        elif char == \")\":\n            # If it's a closing parenthesis, pop from the stack and add the popped opening parenthesis to the current group\n            if stack:\n                group = stack.pop() + char\n                if not groups:\n                    groups.append(group)\n                else:\n                    groups[-1] += group\n            else:\n                # If the stack is empty and we encounter a closing parenthesis, the input string is not balanced\n                return []\n\n    # If the stack is not empty after the iteration, return an empty list as the input string is not balanced\n    if stack:\n        return []\n\n    # Return the list of groups\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    # Subtract the integer part from the number\n    decimal_part = number - int(number)\n\n    # Return the result\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Step 1: Calculate the mean of the list\n    mean = sum(numbers) / len(numbers)\n\n    # Step 2: Calculate the absolute difference between each element and the mean\n    absolute_differences = [abs(x - mean) for x in numbers]\n\n    # Step 3: Calculate the mean of the absolute differences\n    mad = sum(absolute_differences) / len(absolute_differences)\n\n    # Step 4: Return the mean of the absolute differences\n    return mad"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    # Create a new list\n    new_list = []\n    \n    # Loop through the input list\n    for i in range(len(numbers)):\n        # Append the current element to the new list\n        new_list.append(numbers[i])\n        \n        # Append the delimeter to the new list, except for the last element\n        if i != len(numbers) - 1:\n            new_list.append(delimeter)\n    \n    # Return the new list\n    return new_list"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    # Split the input string by spaces to get a list of groups\n    groups = paren_string.split()\n\n    result = []\n\n    for group in groups:\n        # Initialize a counter and a stack\n        counter = 0\n        stack = []\n\n        # Loop through the characters of the group\n        for char in group:\n            # If the character is '(', push it to the stack and increment the counter\n            if char == '(':\n                stack.append(char)\n                counter += 1\n            # If the character is ')', pop from the stack and decrement the counter\n            elif char == ')':\n                stack.pop()\n                counter -= 1\n\n        # The maximum value of the counter during the loop is the deepest level of nesting\n        result.append(counter)\n\n    # Return the result list\n    return result"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Create an empty list for the result\n    result = []\n\n    # Loop through the input list of strings\n    for string in strings:\n        # If the current string contains the given substring, append it to the result list\n        if substring in string:\n            result.append(string)\n\n    # Return the result list\n    return result"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    # 1. Initialize sum and product variables.\n    sum_of_numbers = 0\n    product_of_numbers = 1\n\n    # 2. Loop through the list, add each number to the sum and multiply it to the product.\n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n\n    # 3. Return the sum and product as a tuple.\n    return sum_of_numbers, product_of_numbers"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    # 1. Initialize an empty list to store the rolling maximum.\n    rolling_max_list = []\n\n    # 2. Initialize a variable to store the current maximum.\n    current_max = float('-inf')\n\n    # 3. Iterate over the list of numbers.\n    for num in numbers:\n        # 4. For each number, if it is greater than the current maximum, update the current maximum and append it to the rolling maximum list.\n        if num > current_max:\n            current_max = num\n        # 5. If it is not greater than the current maximum, append the current maximum to the rolling maximum list.\n        rolling_max_list.append(current_max)\n\n    # 6. Return the rolling maximum list.\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \n\n    Args:\n        string (str): The string to test\n\n    Returns:\n        bool: True if the string is a palindrome, False otherwise\n    \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\n    Args:\n        string (str): The string to make a palindrome from\n\n    Returns:\n        str: The shortest palindrome that begins with the supplied string\n    \"\"\"\n    if not string:\n        return ''\n\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert the strings to integers\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n\n    # Perform XOR operation on the integers\n    xor_result = int_a ^ int_b\n\n    # Convert the result back to a string\n    result = bin(xor_result)[2:]\n\n    # Return the result\n    return result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    # 1. Check if the list is empty.\n    if not strings:\n        return None\n\n    # 2. Sort the list by length of strings.\n    strings.sort(key=len)\n\n    # 3. Return the last string in the sorted list.\n    return strings[-1]"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    # 1. Create an empty list to store the prefixes.\n    prefixes = []\n\n    # 2. Loop through the string, and for each character, add the substring from the start to the current character to the list of prefixes.\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n\n    # 3. Return the list of prefixes.\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # Step 1: Create a list of numbers from 0 to n\n    numbers = list(range(n + 1))\n    \n    # Step 2: Convert the list to a string with space-delimited numbers\n    numbers_str = ' '.join(map(str, numbers))\n    \n    # Step 3: Return the string\n    return numbers_str"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # 1. Convert the string to lowercase.\n    string = string.lower()\n\n    # 2. Create a set of characters from the string.\n    char_set = set(string)\n\n    # 3. Return the length of the set.\n    return len(char_set)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \n    \"\"\"\n    # Create a dictionary to map the notes to their corresponding beats\n    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    # Split the input string by spaces to get a list of notes\n    notes = music_string.split()\n\n    # Loop through the list of notes, and for each note, append its corresponding beats to the result list\n    result = []\n    for note in notes:\n        result.append(note_to_beats[note])\n\n    # Return the result list\n    return result"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Step 1: Use the built-in count method to count the number of non-overlapping occurrences of the substring in the string.\n    non_overlapping_count = string.count(substring)\n\n    # Step 2: Subtract the length of the substring from the length of the string.\n    string_length_minus_substring_length = len(string) - len(substring)\n\n    # Step 3: Divide the result by the length of the substring.\n    overlapping_count = string_length_minus_substring_length // len(substring)\n\n    # Step 4: Add the result of step 1 to the result of step 3.\n    total_count = non_overlapping_count + overlapping_count\n\n    # Step 5: Return the result.\n    return total_count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Create a dictionary to map the words to their corresponding integer values.\n    word_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of words.\n    words = numbers.split()\n\n    # Sort the list of words based on their corresponding integer values.\n    sorted_words = sorted(words, key=lambda word: word_to_int[word])\n\n    # Join the sorted list of words into a string and return it.\n    return ' '.join(sorted_words)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Step 1: Sort the list of numbers\n    numbers.sort()\n\n    # Step 2: Initialize the minimum difference to a large number\n    min_diff = float('inf')\n\n    # Step 3: Loop through the list and calculate the difference between each pair of adjacent numbers\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n\n        # Step 4: If the difference is less than the minimum difference, update the minimum difference and store the pair of numbers\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    # Step 5: Return the pair of numbers\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Subtract the minimum value from each number in the list\n    shifted_numbers = [num - min_val for num in numbers]\n\n    # Divide each number in the list by the range (max - min)\n    rescaled_numbers = [num / (max_val - min_val) for num in shifted_numbers]\n\n    # Return the rescaled list\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    # 1. Create an empty list for integers.\n    integers = []\n\n    # 2. Loop through the given list.\n    for value in values:\n        # 3. Check if the current value is an integer, if yes, append it to the integer list.\n        if isinstance(value, int):\n            integers.append(value)\n\n    # 4. Return the integer list.\n    return integers"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Create a list of all numbers from 1 to n-1\n    divisors = list(range(1, n))\n\n    # Check if each number in the list divides n evenly\n    even_divisors = [divisor for divisor in divisors if n % divisor == 0]\n\n    # Return the largest number that divides n evenly\n    return max(even_divisors)"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_elements = set()\n    result = []\n    for num in numbers:\n        if num not in unique_elements:\n            unique_elements.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    # 1. Create an empty string to store the result.\n    result = \"\"\n\n    # 2. Loop through the string.\n    for char in string:\n        # 3. For each character, check if it is lowercase or uppercase.\n        if char.islower():\n            # 4. If it is lowercase, convert it to uppercase and add it to the result string.\n            result += char.upper()\n        elif char.isupper():\n            # 5. If it is uppercase, convert it to lowercase and add it to the result string.\n            result += char.lower()\n        else:\n            # If the character is neither lowercase nor uppercase, add it to the result string as is.\n            result += char\n\n    # 6. Return the result string.\n    return result"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \n\n 1. Use the join() method to concatenate the list of strings into a single string.\n2. Return the concatenated string.\"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    # 1. Create an empty list to store the filtered strings.\n    filtered_strings = []\n\n    # 2. Loop through the input list of strings.\n    for string in strings:\n        # 3. Check if the current string starts with the given prefix.\n        if string.startswith(prefix):\n            # 4. If it does, append it to the filtered list.\n            filtered_strings.append(string)\n\n    # 5. Return the filtered list.\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    # 1. Create a new list.\n    positive_numbers = []\n    \n    # 2. Loop through the input list.\n    for num in l:\n        # 3. If the number is positive, append it to the new list.\n        if num > 0:\n            positive_numbers.append(num)\n    \n    # 4. Return the new list.\n    return positive_numbers"}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    # 1. If n is less than 2, return False.\n    if n < 2:\n        return False\n\n    # 2. Loop from 2 to the square root of n.\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # 3. If n is divisible by any number in the loop, return False.\n        if n % i == 0:\n            return False\n\n    # 4. If no divisor is found, return True.\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\nimport numpy as np\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError(\"Invalid input: list must have even number of coefficients and largest non-zero coefficient.\")\n\n    # Use numpy library to find the roots of the polynomial\n    roots = np.roots(xs)\n\n    # Return the first root\n    return roots[0].real"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Step 1: Create a list of all the indices that are divisible by three\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n\n    # Step 2: Sort the list of indices\n    sorted_indices = sorted(indices, key=lambda x: l[x])\n\n    # Step 3: Return a new list that is identical to the original list in the indicies that are not divisible by three,\n    # and equal to the sorted indices in the indicies that are divisible by three\n    result = []\n    for i in range(len(l)):\n        if i in sorted_indices:\n            result.append(l[sorted_indices.pop(0)])\n        else:\n            result.append(l[i])\n    return result"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # 1. Create a set from the list to remove duplicates.\n    unique_set = set(l)\n    \n    # 2. Convert the set back to a list.\n    unique_list = list(unique_set)\n    \n    # 3. Sort the list.\n    unique_list.sort()\n    \n    # 4. Return the sorted list.\n    return unique_list"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    # 1. Initialize max_element to the first element of the list.\n    max_element = l[0]\n\n    # 2. Loop through the list, if the current element is greater than max_element, update max_element.\n    for element in l:\n        if element > max_element:\n            max_element = element\n\n    # 3. Return max_element.\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    # 1. Create a counter.\n    count = 0\n    \n    # 2. Loop from 1 to n-1.\n    for i in range(1, n):\n        # 3. Check if the number is divisible by 11 or 13.\n        if i % 11 == 0 or i % 13 == 0:\n            # 4. If yes, count the number of 7s in the number.\n            count += str(i).count('7')\n    \n    # 5. Return the counter.\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Step 1: Create a list of all the even indices of the given list\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n\n    # Step 2: Sort the list of even indices\n    sorted_even_indices = sorted(even_indices, key=lambda i: l[i])\n\n    # Step 3: Return a new list that is identical to the original list in the odd indicies, and equal to the sorted even indices in the even indicies\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(l[sorted_even_indices.pop(0)])\n        else:\n            result.append(l[i])\n    return result"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \n    :param s: input string\n    :return: encoded string\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \n    :param s: encoded string\n    :return: decoded string\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "from typing import List\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n: int) -> List[int]:\n    \"\"\"Generate a Fibonacci sequence.\"\"\"\n    fib_seq = [0, 1]\n    while len(fib_seq) < n:\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq\n\ndef prime_fib(n: int) -> int:\n    \"\"\"Return the n-th number that is a Fibonacci number and it's also prime.\"\"\"\n    counter = n\n    fib_seq = fibonacci(n * 10)  # Generate a large Fibonacci sequence\n    for num in fib_seq:\n        if is_prime(num):\n            counter -= 1\n            if counter == 0:\n                return num"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \n    Since all cars are moving at the same speed and are infinitely sturdy, the number of collisions will be equal to the number of cars in each set.\n    Return the number of cars in one set.\n    \"\"\"\n    return n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    new_list = []\n    for element in l:\n        new_list.append(element + 1)\n    return new_list"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Create a set to store the elements of the list\n    elements = set(l)\n\n    # Loop through the list\n    for element in l:\n        # Check if its negation is in the set\n        if -element in elements:\n            # If yes, return True\n            return True\n\n    # If the loop finishes without finding a pair, return False\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # Base case\n    if x == 0:\n        return '0'\n    \n    # Recursive case\n    return change_base(x // base, base) + str(x % base)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \n\n 1. Multiply the base and height.\n2. Divide the result by 2.\n3. Return the result.\"\"\"\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    # Create a list to store the first four numbers of the sequence\n    fib_list = [0, 0, 2, 0]\n\n    # Loop from 4 to n\n    for i in range(4, n + 1):\n        # Calculate the next number in the sequence by adding the last four numbers in the list\n        next_num = fib_list[i - 1] + fib_list[i - 2] + fib_list[i - 3] + fib_list[i - 4]\n\n        # Append the next number to the list\n        fib_list.append(next_num)\n\n    # Return the n-th number in the list\n    return fib_list[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "import re\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Remove all non-alphanumeric characters and convert the string to lowercase\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text).lower()\n    \n    # Compare the string with its reverse\n    return cleaned_text == cleaned_text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = set(\"aeiouAEIOU\")\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \n 1. Return the sum of x and y.\"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \n    :param s0: First string\n    :param s1: Second string\n    :return: True if both strings have the same characters, False otherwise\n    \"\"\"\n    # Create frequency dicts for both strings\n    freq_dict_s0 = {}\n    freq_dict_s1 = {}\n    \n    for char in s0:\n        if char in freq_dict_s0:\n            freq_dict_s0[char] += 1\n        else:\n            freq_dict_s0[char] = 1\n            \n    for char in s1:\n        if char in freq_dict_s1:\n            freq_dict_s1[char] += 1\n        else:\n            freq_dict_s1[char] = 1\n            \n    # Compare the frequency dicts\n    return freq_dict_s0 == freq_dict_s1"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \n    :param n: The n-th Fibonacci number to calculate\n    :type n: int\n    :return: The n-th Fibonacci number\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    # 1. Create a counter for opening and closing brackets.\n    open_bracket_count = 0\n\n    # 2. Loop through the string, increment the counter for opening brackets and decrement for closing brackets.\n    for bracket in brackets:\n        if bracket == \"<\":\n            open_bracket_count += 1\n        elif bracket == \">\":\n            open_bracket_count -= 1\n\n        # 3. If the counter is negative at any point, return False.\n        if open_bracket_count < 0:\n            return False\n\n    # 4. If the counter is not zero at the end, return False.\n    if open_bracket_count != 0:\n        return False\n\n    # 5. Otherwise, return True.\n    return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Check if the list is empty or has only one element. If so, return True.\n    if len(l) <= 1:\n        return True\n\n    # Determine if the list is increasing or decreasing.\n    is_increasing = l[0] < l[1]\n    is_decreasing = l[0] > l[1]\n\n    # Loop through the list and check if the list is monotonically increasing or decreasing.\n    for i in range(1, len(l)):\n        if is_increasing and l[i] < l[i-1]:\n            return False\n        if is_decreasing and l[i] > l[i-1]:\n            return False\n\n    # Return True if the list is monotonically increasing or decreasing, otherwise return False.\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Create a set for each list to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set to a list and sort it\n    sorted_list = sorted(list(intersection))\n\n    # Return the sorted list\n    return sorted_list"}
{"task_id": "HumanEval/59", "completion": "def is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n.\"\"\"\n    largest_prime = 1\n    # Divide n by 2 until it's odd\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    # Check for odd factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n    return largest_prime"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \n    :param n: The upper limit of the sum\n    :type n: int\n    :return: The sum of numbers from 1 to n\n    :rtype: int\n    \"\"\"\n    # Use the formula for the sum of an arithmetic series: n*(n+1)/2\n    result = n * (n + 1) // 2\n    return result"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack or stack[-1] != \"(\":\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # 1. Create a list to store the derivative coefficients.\n    derivative_coeffs = []\n\n    # 2. Loop through the input list, starting from the second element.\n    for i in range(1, len(xs)):\n        # 3. Multiply each element by its index and append to the derivative list.\n        derivative_coeffs.append(xs[i] * i)\n\n    # 4. Return the derivative list.\n    return derivative_coeffs"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \n    :param n: The n-th element of the fibfib sequence to compute\n    :type n: int\n    :return: The n-th element of the fibfib sequence\n    :rtype: int\n    \"\"\"\n    # Create a list to store the first three numbers of the sequence\n    fibfib_sequence = [0, 0, 1]\n\n    # Use a loop to calculate the next numbers in the sequence\n    for i in range(3, n + 1):\n        fibfib_sequence.append(fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3])\n\n    # Return the n-th number in the sequence\n    return fibfib_sequence[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    counter = 0\n\n    for char in s.lower():\n        if char in vowels:\n            counter += 1\n\n    if s.endswith('y'):\n        counter += 1\n\n    return counter"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Convert the integer to a string\n    x_str = str(x)\n    \n    # If shift is greater than the length of the string, reverse the string\n    if shift > len(x_str):\n        return x_str[::-1]\n    \n    # Otherwise, shift the string to the right by the shift amount\n    else:\n        shifted_str = x_str[-shift:] + x_str[:-shift]\n        return shifted_str"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \n    \"\"\"\n    # 1. Initialize a variable to store the sum.\n    sum_of_upper_chars = 0\n\n    # 2. Loop through the string.\n    for char in s:\n        # 3. If the character is uppercase, add its ASCII value to the sum.\n        if char.isupper():\n            sum_of_upper_chars += ord(char)\n\n    # 4. Return the sum.\n    return sum_of_upper_chars"}
{"task_id": "HumanEval/67", "completion": "import re\n\ndef fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    # Extract the numbers of oranges and apples from given string\n    numbers = re.findall(r'\\d+', s)\n    apples = int(numbers[0])\n    oranges = int(numbers[1])\n    \n    # Calculate the sum of oranges and apples\n    sum_of_fruits = apples + oranges\n    \n    # Deduct the sum from the total number of fruits\n    mangoes = n - sum_of_fruits\n    \n    # Return the number of mangoes\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    even_values = []\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            even_values.append((value, i))\n\n    if not even_values:\n        return []\n\n    even_values.sort()\n    return even_values[0]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Create a dictionary to store the frequency of each integer\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Find the greatest integer that satisfies the condition\n    result = -1\n    for num, freq in freq_dict.items():\n        if num <= freq:\n            result = max(result, num)\n\n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = 0, len(sorted_lst) - 1\n\n    while left <= right:\n        if left == right:\n            result.append(sorted_lst[left])\n            break\n        result.append(sorted_lst[left])\n        result.append(sorted_lst[right])\n        left += 1\n        right -= 1\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the triangle is valid\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the triangle is not valid\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Check if the list is palindromic\n    if q == q[::-1]:\n        # Check if the sum of the elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    def is_palindrome(arr):\n        \"\"\"Check if an array is palindromic.\"\"\"\n        return arr == arr[::-1]\n\n    if is_palindrome(arr):\n        return 0\n\n    n = len(arr)\n    changes = 0\n\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    # Compare the total number of characters and return the list with fewer characters\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Check if a number is the multiplication of 3 prime numbers.\"\"\"\n    prime_factors = []\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            a = a // i\n    if a > 1 and is_prime(a):\n        prime_factors.append(a)\n    return len(prime_factors) == 3"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    This function returns true if a number x is a simple power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    # Check if x is less than or equal to 1. If it is, return False.\n    if x <= 1:\n        return False\n\n    # Loop from 2 to x.\n    for i in range(2, x + 1):\n        # Check if x is divisible by n.\n        if x % n == 0:\n            # If it is, divide x by n and continue the loop.\n            x = x // n\n        else:\n            # If it is not, return False.\n            return False\n\n    # If the loop completes, return True.\n    return True"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Check if the number is a cube of some integer\n    cube_root = round(a**(1/3))\n    return cube_root**3 == abs(a)"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \n\n 1. Create a set of hexadecimal digits that are prime.\n2. Loop the input string, count the prime hexadecimal digits.\n3. Return the count.\"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Convert the decimal number to binary using the built-in bin() function.\n    binary = bin(decimal)[2:]\n\n    # Add 'db' at the beginning and end of the binary string.\n    binary_with_db = 'db' + binary + 'db'\n\n    # Return the final binary string.\n    return binary_with_db\n\n# Test the function with some examples\nprint(decimal_to_binary(15))  # returns \"db1111db\"\nprint(decimal_to_binary(32))  # returns \"db100000db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \n\n 1. Check if the length of the string is less than 3.\n2. Loop through the string, check if every 3 consecutive letters are distinct.\n3. Return True if all conditions are met, otherwise return False.\"\"\"\n    \n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Loop through the string, check if every 3 consecutive letters are distinct\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    # Return True if all conditions are met\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \n\n 1. Create a dictionary to map GPA to letter grades.\n2. Iterate through the list of GPAs and map each GPA to its corresponding letter grade.\n3. Return the list of letter grades.\"\"\"\n    \n    # Create a dictionary to map GPA to letter grades\n    grade_dict = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n    \n    # Iterate through the list of GPAs and map each GPA to its corresponding letter grade\n    letter_grades = []\n    for grade in grades:\n        for gpa in sorted(grade_dict.keys(), reverse=True):\n            if grade >= gpa:\n                letter_grades.append(grade_dict[gpa])\n                break\n    \n    # Return the list of letter grades\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Get the length of the string\n    length = len(string)\n    \n    # Check if the length is a prime number\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # 1. Convert the integer to a string.\n    str_N = str(N)\n    \n    # 2. Sum the digits.\n    sum_digits = sum(int(digit) for digit in str_N)\n    \n    # 3. Convert the sum to binary.\n    binary_sum = bin(sum_digits)[2:]\n    \n    # 4. Return the binary string.\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\n    \"\"\"\n    # 1. Create a variable to store the sum of even numbers at odd indices.\n    sum_even_odd_indices = 0\n\n    # 2. Loop through the list, check if the index is odd and the number is even.\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            # 3. If both conditions are met, add the number to the sum.\n            sum_even_odd_indices += lst[i]\n\n    # 4. Return the sum.\n    return sum_even_odd_indices"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n\n    # Loop the list of words, sort each word and join them back into a string\n    ordered_words = [''.join(sorted(word)) for word in words]\n\n    # Return the ordered string\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = []\n    for row_index, row in enumerate(lst):\n        for col_index, element in enumerate(row):\n            if element == x:\n                coordinates.append((row_index, col_index))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\n    :param array: List of non-negative integers\n    :return: Sorted list of integers\n    \"\"\"\n    # Create a copy of the given array\n    sorted_array = array.copy()\n\n    # Check if the sum of the first and last index values is even or odd\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        # Sort the copied array in descending order if the sum is even\n        sorted_array.sort(reverse=True)\n    else:\n        # Sort the copied array in ascending order if the sum is odd\n        sorted_array.sort()\n\n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shift = 2 * 2\n    encrypted_string = ''\n\n    for char in s:\n        if char in alphabet:\n            index = alphabet.index(char)\n            new_index = (index + shift) % len(alphabet)\n            encrypted_string += alphabet[new_index]\n        else:\n            encrypted_string += char\n\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Remove duplicates from the list\n    lst = list(set(lst))\n    \n    # Sort the list\n    lst.sort()\n    \n    # If the length of the list is less than 2, return None\n    if len(lst) < 2:\n        return None\n    \n    # Return the second element of the list\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', S)]\n    \n    # Initialize the counter\n    counter = 0\n    \n    # Loop through the sentences\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\"\n        if sentence.startswith(\"I\"):\n            # Increment the counter\n            counter += 1\n            \n    # Return the counter\n    return counter"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # 1. Create a dictionary to map vowels to the letter that appears 2 places ahead of that vowel in the english alphabet.\n    vowel_map = {\n        'a': 'c',\n        'e': 'g',\n        'i': 'k',\n        'o': 'q',\n        'u': 'w'\n    }\n    \n    # 2. Create a new string.\n    encoded_message = \"\"\n    \n    # 3. Loop through the message, for each character:\n    for char in message:\n        # If it's a vowel, replace it with the corresponding letter from the dictionary.\n        if char.lower() in vowel_map:\n            encoded_message += vowel_map[char.lower()].upper() if char.isupper() else vowel_map[char.lower()]\n        # If it's a letter, swap its case.\n        elif char.isalpha():\n            encoded_message += char.swapcase()\n        # If it's not a letter, leave it as it is.\n        else:\n            encoded_message += char\n    \n    # 4. Return the new string.\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Sum the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_sum(lst):\n    \"\"\"Find the largest prime value and return the sum of its digits.\"\"\"\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not d:\n        return False\n\n    lower_case = all(isinstance(k, str) and k.islower() for k in d.keys())\n    upper_case = all(isinstance(k, str) and k.isupper() for k in d.keys())\n\n    return lower_case or upper_case"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n:\n            break\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \n\n 1. Extract the unit digits of both numbers.\n2. Multiply the unit digits.\n3. Return the product.\"\"\"\n    \n    # Extract the unit digits of both numbers\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Multiply the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    # Return the product\n    return product\n\n# Test the function with the provided examples\nprint(multiply(148, 412)) # should return 16\nprint(multiply(19, 28)) # should return 72\nprint(multiply(2020, 1851)) # should return 0\nprint(multiply(14, -15)) # should return 20"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # 1. Create a list of uppercase vowels.\n    upper_vowels = ['A', 'E', 'I', 'O', 'U']\n    \n    # Initialize count to 0\n    count = 0\n    \n    # 2. Loop through the string, check if the character is an uppercase vowel and its index is even.\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in upper_vowels:\n            # 3. If yes, increment the count.\n            count += 1\n            \n    # 4. Return the count.\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # 1. Create a list to store the number of stones in each level.\n    pile = []\n\n    # 2. Add the first level of stones to the list.\n    pile.append(n)\n\n    # 3. Loop from the second level to the nth level.\n    for i in range(1, n):\n        # 4. If n is odd, add the next odd number to the list.\n        if n % 2 != 0:\n            pile.append(pile[-1] + 2)\n        # 5. If n is even, add the next even number to the list.\n        else:\n            pile.append(pile[-1] + 2)\n\n    # 6. Return the list.\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \n    \"\"\"\n    # Replace all commas with spaces\n    s = s.replace(',', ' ')\n    \n    # Split the string by spaces\n    words = s.split()\n    \n    # Return the list of words\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \n    \"\"\"\n    # 1. Check if x is greater than y, if so, return -1.\n    if x > y:\n        return -1\n\n    # 2. If x is even, set x as the result.\n    if x % 2 == 0:\n        result = x\n    # 3. If x is odd, set x as x + 1.\n    else:\n        result = x + 1\n\n    # 4. Loop from x to y, if the number is even, set it as the result.\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            result = i\n\n    # 5. Return the result.\n    return result"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \n    Parameters:\n    n (int): The first integer\n    m (int): The second integer\n    \n    Returns:\n    str: The binary representation of the rounded average of the integers from n through m\n    \"\"\"\n    # Check if n is greater than m\n    if n > m:\n        return -1\n    \n    # Compute the average of the integers from n through m\n    avg = sum(range(n, m+1)) / (m-n+1)\n    \n    # Round the average to the nearest integer\n    rounded_avg = round(avg)\n    \n    # Convert the rounded average to binary\n    binary_avg = bin(rounded_avg)\n    \n    # Return the binary representation\n    return binary_avg"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    def has_even_digit(n):\n        \"\"\"Check if a number has any even digit.\"\"\"\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    # Filter the list using the function\n    filtered_list = [num for num in x if not has_even_digit(num)]\n\n    # Return the sorted list\n    return sorted(filtered_list)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Filter the array to only include integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the filtered array in ascending order\n    sorted_arr = sorted(filtered_arr)\n\n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n\n    # Map each integer to its corresponding name\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [names[num - 1] for num in reversed_arr]\n\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \n    :param n: size of the list\n    :return: list of size n\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # calculate factorial\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # calculate sum\n            total = 0\n            for j in range(1, i + 1):\n                total += j\n            result.append(total)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Calculate the sum of digits of a number.\n        \"\"\"\n        total = 0\n        num = abs(num)\n        while num > 0:\n            total += num % 10\n            num //= 10\n        return total\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \n\n 1. Sort the given array.\n2. Compare the sorted array with the original array.\n3. If they are the same, return True.\n4. If they are not the same, return False.\"\"\"\n    \n    # If the array is empty, return True\n    if not arr:\n        return True\n    \n    # Sort the array\n    sorted_arr = sorted(arr)\n    \n    # Compare the sorted array with the original array\n    for i in range(len(arr)):\n        # Perform right shift operation\n        arr = arr[-1:] + arr[:-1]\n        \n        # Check if the array is sorted\n        if arr == sorted_arr:\n            return True\n    \n    # If the array is not sorted after all right shift operations, return False\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \n    :param lst1: List of integers\n    :param lst2: List of integers\n    :return: \"YES\" or \"NO\"\n    \"\"\"\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    odd_count_lst2 = sum(1 for num in lst2 if num % 2 != 0)\n\n    if odd_count_lst1 > odd_count_lst2:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    # 1. Split the string into a list of characters.\n    chars = test.split()\n    \n    # 2. Create a dictionary to store the frequency of each character.\n    freq = {}\n    \n    # 3. Loop through the list of characters, update the frequency in the dictionary.\n    for char in chars:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # 4. Find the maximum frequency.\n    max_freq = max(freq.values())\n    \n    # 5. Create a list of characters that have the maximum frequency.\n    max_chars = [char for char, count in freq.items() if count == max_freq]\n    \n    # 6. Return a dictionary with the characters and their frequency.\n    return {char: max_freq for char in max_chars}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \n    1. Create a new string that contains all characters in s that are not in c.\n    2. Check if the new string is a palindrome.\n    3. Return a tuple containing the new string and the result of the palindrome check.\"\"\"\n    \n    # Step 1: Create a new string that contains all characters in s that are not in c\n    new_string = ''.join([char for char in s if char not in c])\n    \n    # Step 2: Check if the new string is a palindrome\n    is_palindrome = new_string == new_string[::-1]\n    \n    # Step 3: Return a tuple containing the new string and the result of the palindrome check\n    return (new_string, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    def count_odd_digits(s):\n        \"\"\"Count the number of odd digits in a string.\"\"\"\n        return sum(int(c) % 2 for c in s)\n\n    result = []\n    for i, s in enumerate(lst):\n        count = count_odd_digits(s)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # 1. Initialize the current sum and the minimum sum to the first element of the array.\n    current_sum = min_sum = nums[0]\n    \n    # 2. Loop through the array starting from the second element.\n    for num in nums[1:]:\n        # 3. Update the current sum by adding the current element.\n        current_sum += num\n        \n        # 4. If the current sum is less than the current element, update the current sum to the current element.\n        current_sum = min(current_sum, num)\n        \n        # 5. If the current sum is less than the minimum sum, update the minimum sum to the current sum.\n        min_sum = min(min_sum, current_sum)\n    \n    # 6. Return the minimum sum.\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(n):\n        \"\"\"\n        Helper function to count the number of ones in the binary representation of a number.\n        \"\"\"\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    # Sort the array based on the number of ones in the binary representation, and then by the decimal value.\n    arr.sort(key=lambda x: (count_ones(x), x))\n\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \n    \"\"\"\n    # Step 1: Create a function to count the consonants in a word.\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        count = 0\n        for char in word:\n            if char.lower() in consonants:\n                count += 1\n        return count\n\n    # Step 2: Split the string into a list of words.\n    words = s.split()\n\n    # Step 3: Loop the list of words, if the number of consonants in the word is equal to n, append the word to the result list.\n    result = []\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n\n    # Step 4: Return the result list.\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_balanced(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    str1, str2 = lst\n    if is_balanced(str1 + str2) or is_balanced(str2 + str1):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Step 1: Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Step 2: Return the first k elements of the sorted array\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \n\n    :param lst: List of integers\n    :type lst: list\n    :return: Sum of all odd elements in even positions\n    :rtype: int\n    \"\"\"\n    # 1. Create a variable to store the sum of odd elements in even positions.\n    sum_odd_even = 0\n\n    # 2. Loop through the list with index.\n    for i, num in enumerate(lst):\n        # 3. Check if the index is even and the element is odd.\n        if i % 2 == 0 and num % 2 != 0:\n            # 4. If both conditions are met, add the element to the sum.\n            sum_odd_even += num\n\n    # 5. Return the sum.\n    return sum_odd_even"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Create a variable to store the sum\n    sum_of_elements = 0\n\n    # Loop through the first k elements of the array\n    for i in range(k):\n        # Check if the current element has at most two digits\n        if 0 <= arr[i] <= 99:\n            # If it does, add it to the sum\n            sum_of_elements += arr[i]\n\n    # Return the sum\n    return sum_of_elements"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \n    \"\"\"\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \n\n 1. Check if the date string is empty.\n2. Split the date string by '-'.\n3. Check if the length of the split list is not equal to 3.\n4. Check if the month is not between 1 and 12.\n5. Check if the day is not between 1 and 31 for months 1,3,5,7,8,10,12.\n6. Check if the day is not between 1 and 30 for months 4,6,9,11.\n7. Check if the day is not between 1 and 29 for the month 2.\n8. Return True if all conditions are met, otherwise return False.\"\"\"\n\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Split the date string by '-'\n    date_parts = date.split('-')\n\n    # Check if the length of the split list is not equal to 3\n    if len(date_parts) != 3:\n        return False\n\n    # Extract month, day, and year\n    month, day, year = int(date_parts[0]), int(date_parts[1]), int(date_parts[2])\n\n    # Check if the month is not between 1 and 12\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is not between 1 and 31 for months 1,3,5,7,8,10,12\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n\n    # Check if the day is not between 1 and 30 for months 4,6,9,11\n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n\n    # Check if the day is not between 1 and 29 for the month 2\n    if month == 2 and (day < 1 or day > 29):\n        return False\n\n    # Return True if all conditions are met\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 == 1:\n                odd_count += 1\n        return odd_count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if len(lst) <= 1:\n        return True\n\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    for num in set(lst):\n        if lst.count(num) > 1:\n            return False\n\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \n\n 1. Find the intersection of the two intervals.\n2. If the intersection is empty, return \"NO\".\n3. Calculate the length of the intersection.\n4. Check if the length is a prime number.\n5. Return \"YES\" if it is a prime number, otherwise return \"NO\".\"\"\"\n\n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If the intersection is empty, return \"NO\"\n    if start > end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = end - start + 1\n\n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n\n    # Return \"YES\" if it is a prime number\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \n    \"\"\"\n    # 1. Check if the array is empty, return None if it is.\n    if not arr:\n        return None\n\n    # 2. Calculate the product of all signs in the array.\n    sign_product = 1\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n\n    # 3. Calculate the sum of the magnitudes of all integers in the array.\n    magnitude_sum = sum(abs(num) for num in arr)\n\n    # 4. Multiply the product of signs with the sum of magnitudes.\n    result = sign_product * magnitude_sum\n\n    # 5. Return the result.\n    return result"}
{"task_id": "HumanEval/129", "completion": "from itertools import product\n\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    min_path = []\n    min_lex_val = float('inf')\n\n    def get_neighbors(x, y):\n        neighbors = []\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                neighbors.append((nx, ny))\n        return neighbors\n\n    def dfs(x, y, path, visited):\n        nonlocal min_path, min_lex_val\n        if len(path) == k:\n            lex_val = int(''.join(map(str, path)))\n            if lex_val < min_lex_val:\n                min_lex_val = lex_val\n                min_path = path\n            return\n        for nx, ny in get_neighbors(x, y):\n            if (nx, ny) not in visited:\n                dfs(nx, ny, path + [grid[nx][ny]], visited | {(nx, ny)})\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]], {(i, j)})\n\n    return min_path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \n    :param n: non-negative integer\n    :return: list of the first n + 1 numbers of the Tribonacci sequence\n    \"\"\"\n    # Create a list to store the Tribonacci sequence\n    tribonacci_sequence = [1, 3, 2]\n    \n    # Loop from 3 to n + 1\n    for i in range(3, n + 1):\n        # If the current number is even, add 1 + (current number / 2) to the list\n        if i % 2 == 0:\n            tribonacci_sequence.append(1 + (i // 2))\n        # If the current number is odd, add the sum of the last three numbers in the list to the list\n        else:\n            tribonacci_sequence.append(tribonacci_sequence[-1] + tribonacci_sequence[-2] + tribonacci_sequence[-3])\n    \n    # Return the list\n    return tribonacci_sequence"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # 1. Convert the integer to a string.\n    n_str = str(n)\n    \n    # 2. Initialize a variable to store the product of the odd digits.\n    product = 1\n    \n    # 3. Loop through the string, if the digit is odd, multiply it with the product variable.\n    for digit in n_str:\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    \n    # 4. If the product variable is still 1 after the loop, return 0.\n    if product == 1:\n        return 0\n    \n    # 5. Return the product variable.\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \n    \n 1. Create a list of rounded up numbers.\n2. Square each number in the list.\n3. Sum the squared numbers.\n4. Return the sum.\"\"\"\n    \n    # Create a list of rounded up numbers\n    rounded_lst = [math.ceil(num) for num in lst]\n    \n    # Square each number in the list\n    squared_lst = [num**2 for num in rounded_lst]\n    \n    # Sum the squared numbers\n    sum_squared = sum(squared_lst)\n    \n    # Return the sum\n    return sum_squared"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    # Check if the string is empty\n    if not txt:\n        return False\n\n    # Get the last character of the string\n    last_char = txt[-1]\n\n    # Check if the last character is an alphabetical character\n    if not last_char.isalpha():\n        return False\n\n    # Check if the last character is not a part of a word\n    words = txt.split()\n    if len(words) > 1 and last_char == words[-1][-1]:\n        return False\n\n    return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    # Store the original inputs\n    original_a = a\n    original_b = b\n\n    # Check if inputs are strings and convert to floats\n    try:\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n    except ValueError:\n        pass\n\n    # Compare the two inputs and return the larger one in its original data type\n    if a > b:\n        return original_a\n    elif b > a:\n        return original_b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Check if the given number is even\n    if n % 2 != 0:\n        return False\n\n    # If the number is less than 8, return False\n    if n < 8:\n        return False\n\n    # If the number is 8, return True\n    if n == 8:\n        return True\n\n    # If the number is greater than 8, return True\n    return True"}
{"task_id": "HumanEval/139", "completion": "def factorial(n):\n    \"\"\"Calculate the factorial of a given number.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of a given number.\"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \n\n 1. Replace all spaces with underscores.\n2. Replace all occurrences of more than two consecutive underscores with a single hyphen.\n3. Return the modified string.\"\"\"\n    \n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace all occurrences of more than two consecutive underscores with a single hyphen\n    while \"__\" in text:\n        text = text.replace(\"__\", \"_\")\n    while \"___\" in text:\n        text = text.replace(\"___\", \"-\")\n    \n    return text"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \n\n 1. Check if the file name is valid according to the conditions.\n2. Return \"Yes\" if valid, otherwise return \"NO\".\"\"\"\n\n    # Check if there are more than three digits\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return \"No\"\n\n    # Check if there is exactly one dot\n    if file_name.count('.') != 1:\n        return \"No\"\n\n    # Split the file name into the name and extension\n    name, extension = file_name.split('.')\n\n    # Check if the name starts with a letter and is not empty\n    if not name.isalpha() or not name:\n        return \"No\"\n\n    # Check if the extension is one of the allowed extensions\n    if extension not in ['txt', 'exe', 'dll']:\n        return \"No\"\n\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total_sum += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total_sum += num ** 3\n        else:\n            total_sum += num\n    return total_sum"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"Return words with prime lengths from the sentence.\"\"\"\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \n\n 1. Convert the fractions to float.\n2. Multiply the fractions.\n3. Check if the result is a whole number.\n4. Return True if the result is a whole number, False otherwise.\"\"\"\n\n    # Step 1: Convert the fractions to float\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    x_float = x_num / x_denom\n    n_float = n_num / n_denom\n\n    # Step 2: Multiply the fractions\n    result = x_float * n_float\n\n    # Step 3: Check if the result is a whole number\n    if result.is_integer():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Step 1: Create a list of tuples, where each tuple contains the original number and the sum of its digits.\n    nums_with_sums = [(num, sum(int(digit) for digit in str(abs(num)))) for num in nums]\n\n    # Step 2: Sort the list of tuples based on the sum of digits, and then based on the original index.\n    nums_with_sums.sort(key=lambda x: (x[1], nums.index(x[0])))\n\n    # Step 3: Extract the sorted numbers from the list of tuples.\n    sorted_nums = [num for num, _ in nums_with_sums]\n\n    # Step 4: Return the sorted list of numbers.\n    return sorted_nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \n    :param nums: List of integers\n    :return: Count of numbers that meet the criteria\n    \"\"\"\n    count = 0\n    for num in nums:\n        # Check if the number is greater than 10\n        if num > 10:\n            # Convert the number to a string to access the first and last digits\n            num_str = str(num)\n            # Check if the first and last digits are odd\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closests to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple(planets[start_index + 1:end_index])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \n    :param lst: List of strings\n    :return: Sorted list of strings\n    \"\"\"\n    # Filter the list to remove strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length of each word\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n\n    return sorted_lst"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \n\n 1. Create a list to store the differences.\n2. Loop through the scores and guesses.\n3. Calculate the absolute difference between the score and guess.\n4. Append the difference to the list.\n5. Return the list.\"\"\"\n    differences = []\n    for score, guess in zip(game, guess):\n        differences.append(abs(score - guess))\n    return differences"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def extension_strength(extension):\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        return cap - sm\n\n    strongest_extension = extensions[0]\n    strongest_strength = extension_strength(strongest_extension)\n\n    for extension in extensions[1:]:\n        current_strength = extension_strength(extension)\n        if current_strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = current_strength\n\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    def generate_rotations(word):\n        \"\"\"Generate all rotations of a word\"\"\"\n        rotations = []\n        for i in range(len(word)):\n            rotations.append(word[i:] + word[:i])\n        return rotations\n\n    rotations = generate_rotations(b)\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \n    \"\"\"\n    # 1. Convert the number to its absolute value.\n    num = abs(num)\n    \n    # 2. Convert the number to a string.\n    num_str = str(num)\n    \n    # 3. Initialize even and odd counters to 0.\n    even_count = 0\n    odd_count = 0\n    \n    # 4. Loop through the string, increment the even counter if the digit is even, and increment the odd counter if the digit is odd.\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # 5. Return a tuple of the even and odd counters.\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        while number >= key:\n            result += roman_numerals[key]\n            number -= key\n    return result"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the triangle inequality theorem holds\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    \n    # Check if the triangle is right-angled\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n\n    # 1. Create a function to count unique characters in a string.\n    def count_unique_chars(word):\n        return len(set(word))\n\n    # 2. Create a list of tuples, each containing a word and its unique character count.\n    word_counts = [(word, count_unique_chars(word)) for word in words]\n\n    # 3. Sort the list of tuples by the unique character count in descending order, and then by the word in ascending order.\n    word_counts.sort(key=lambda x: (-x[1], x[0]))\n\n    # 4. Return the first element of the sorted list.\n    return word_counts[0][0]"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    total_eaten = number + need\n    if remaining >= need:\n        remaining -= need\n    else:\n        total_eaten += remaining\n        remaining = 0\n    return [total_eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \n\n 1. Initialize the result with the first operand.\n2. Loop through the operator list and operand list simultaneously.\n3. Apply the operator to the result and the next operand.\n4. Return the result.\n    \"\"\"\n    # Step 1: Initialize the result with the first operand\n    result = operand[0]\n\n    # Step 2: Loop through the operator list and operand list simultaneously\n    for op, num in zip(operator, operand[1:]):\n        # Step 3: Apply the operator to the result and the next operand\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n\n    # Step 4: Return the result\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    new_str = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                new_str += char.upper()\n            else:\n                new_str += char.lower()\n        else:\n            new_str += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return new_str"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    # Check if the input string is empty\n    if not text:\n        return None\n\n    # Use the hashlib library to generate the md5 hash of the string\n    md5_hash = hashlib.md5(text.encode())\n\n    # Return the hexadecimal representation of the hash\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n\n    # Create a list of even numbers between a and b\n    even_numbers = [num for num in range(a, b + 1) if num % 2 == 0]\n\n    # Return the list\n    return even_numbers"}
